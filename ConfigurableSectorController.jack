
class ConfigurableSectorController
{
	field Point _position;
	field int _width;
	field int _height;

	field boolean _ballLost;
	field boolean _ballCollision;
	field int _collisionVector;
	field int _currentPoints;
	field int _blocksRemaining;

	field BlocksController _blocksController;
	field GameItemController _gameItem;

	constructor ConfigurableSectorController new(Point position, Array activeBlocks, GameItemController gameItem)
	{
		var int posX;
		var int posY;

		let _position = position;

		let posX = _position.getX();
		let posY = _position.getY();

		let _blocksController = BlocksController.new(Point.new(posX + 2, posY + 2), activeBlocks);
		let _gameItem = gameItem;

		let _width = 160;
		let _height = 80;

		let _ballLost = false;
		let _ballCollision = false;
		let _collisionVector = -1;
		let _currentPoints = 0;
		let _blocksRemaining = _blocksController.getBlocksRemaining();

		return this;
	}

	method boolean ballLost() { return _ballLost; }
	method boolean ballCollision() { return _ballCollision; }
	method int getCollisionVector() { return _collisionVector; }
	method int getPoints() { return _currentPoints; }
	method int getBlocksRemaining() { return _blocksRemaining; }

	method void update()
	{
		// Reset invariants for this game loop
		let _currentPoints = 0;

		// Get data from components
		do _blocksController.update();
		let _currentPoints = _blocksController.getPoints();

		do _gameItem.update();
		let _currentPoints = _currentPoints + _gameItem.getPoints();
		let _blocksRemaining = _blocksController.getBlocksRemaining();

		return;
	}

	method void resetInvariants()
	{
		let _ballLost = false;
		let _ballCollision = false;
		let _currentPoints = 0;

		do _blocksController.resetInvariants();

		return;
	}

	method void updateBallPosition(BallController ball)
	{
		// Check game item first
		do _gameItem.updateBallPosition(ball);

		// Check if ball lost in game item
		let _ballLost = _gameItem.ballLost();

		// Ball cannot be lost in blocks controller

		// If ball was not lost, process collisions
		if (~_ballLost)
		{
			do _gameItem.updateBallPosition(ball);
			let _ballCollision = _gameItem.ballCollision();

			if (_ballCollision) 
			{
				let _collisionVector = _gameItem.getCollisionVector();
			}
			else
			{
				do _blocksController.updateBallPosition(ball);
				let _ballCollision = _blocksController.ballCollision();

				if (_ballCollision) 
				{
					let _collisionVector = _blocksController.getCollisionVector();
				}
			}
		}

		return;
	}

	method void updateKeyBoardInput(char key)
	{
		do _gameItem.updateKeyBoardInput(key);
		do clear();
		do render();
		// Blocks controller does not accept keyboard input
		return;
	}

	method void clear()
	{
		var int posX;
		var int posY;

		var int startX;
		var int startY;
		var int endX;
		var int endY;

		let posX = _position.getX();
		let posY = _position.getY();

		let startX = posX - 1;
		let startY = posY - 1;
		let endX = posX + _width + 1;
		let endY = posY + _height + 1;

		if (startX < 0) { let startX = 0; }
		if (startY < 0) { let startY = 0; }
		if (endX > 511) { let endX = 511; }
		if (endY > 255) { let endY = 255; }

		do Screen.setColor(false);
		do Screen.drawRectangle(startX, startY, endX, endY);

		return;
	}

	method void render()
	{
		do _gameItem.render();
		do _blocksController.render();
		return;
	}

	method boolean ballWithinSector(BallController ball)
	{
		var Point ballPosition;
		var int ballRadius;

		var int posX;
		var int posY;
		var int ballX;
		var int ballY;

		var int threshold;

		var int normalized_left_edge;
		var int normalized_right_edge;
		var int normalized_top_edge;
		var int normalized_bottom_edge;

		var boolean withinXBounds;
		var boolean withinYBounds;

		let posX = _position.getX();
		let posY = _position.getY();

		let ballPosition = ball.getPosition();
		let ballRadius = ball.getRadius();

		let ballX = ballPosition.getX();
		let ballY = ballPosition.getY();

		let threshold = 2;

		let normalized_left_edge = posX - ballRadius - threshold;
		let normalized_right_edge = posX + _width + ballRadius + threshold;
		let normalized_top_edge = posY -ballRadius - threshold;
		let normalized_bottom_edge = posY + _height + ballRadius + threshold;

		let withinXBounds = (ballX > normalized_left_edge) & (ballX < normalized_right_edge);
		let withinYBounds = (ballY > normalized_top_edge) & (ballY < normalized_bottom_edge);

		return (withinXBounds) & (withinYBounds);
	}

	method void dispose()
	{
		do _position.dispose();
		do _gameItem.dispose();
		do _blocksController.dispose();

		do Memory.deAlloc(this);

		return;
	}
}